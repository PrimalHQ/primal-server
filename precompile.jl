precompile(Tuple{Type{Array{Dates.DateTime, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{Type{Array{Tuple{Array{UInt8, 1}, Int64}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{Type{Array{Tuple{Array{UInt8, 1}, Int64, Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}, Int64}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Pair{_A, Int32} where _A, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Pair{Int32, _A} where _A, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Pair{String, Int64}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Pair{Symbol, Any}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Tuple{Any, Any}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Tuple{String, Int64}, 1}})
precompile(Tuple{Type{Base.Dict{NTuple{20, UInt8}, Any}}})
precompile(Tuple{Type{Base.Dict{Symbol, PrimalServer.App.CachedFunction}}})
precompile(Tuple{Type{Base.Fix1{F, T} where T where F}, Type{Base.MappingRF{F, T} where T where F}, Type})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Bool}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Array{Function, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{Base.SubString{String}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Tuple}, Array{Any, 1}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Array{Bool, 1}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, NTuple{7, Int64}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Int64, 1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:init,), Tuple{typeof(HTTP.StreamRequest.streamlayer)}}, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:response_stream,), Tuple{Nothing}}, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:return_for_reuse,), Tuple{Base.Missing}}, Tuple{Symbol}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{Any, 1}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{String, 1}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{Symbol, 1}})
precompile(Tuple{Type{Bool}, Int64})
precompile(Tuple{Type{DataStructures.CircularBuffer{T} where T}, Int64})
precompile(Tuple{Type{DataStructures.KDRec{Symbol, Function}}, Int64})
precompile(Tuple{Type{DataStructures.TreeNode{Symbol}}, Type{Symbol}, Vararg{Int64, 4}})
precompile(Tuple{Type{Dates.DateTime}, Dates.DateTime})
precompile(Tuple{Type{Dates.DateTime}, Dates.UTInstant{Dates.Millisecond}})
precompile(Tuple{Type{Dates.Year}, Int64})
precompile(Tuple{Type{Decimals.Decimal}, Int64, Base.GMP.BigInt, Int64})
precompile(Tuple{Type{HTTP.Streams.Stream{M, S} where S<:IO where M<:HTTP.Messages.Message}, HTTP.Messages.Response, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{Type{HTTP.Strings.HTTPVersion}, Int64, Int64})
precompile(Tuple{Type{Int64}, Char})
precompile(Tuple{Type{Int64}, PrimalServer.Nostr.Kind})
precompile(Tuple{Type{NamedTuple{(:connsel, :init_queries), T} where T<:Tuple}, Tuple{String, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:connsel, :keycolumn, :valuecolumn), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{Type{NamedTuple{(:digits, :normal), T} where T<:Tuple}, Tuple{Int64, Bool}})
precompile(Tuple{Type{NamedTuple{(:error,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:event_id, :limit), T} where T<:Tuple}, Tuple{String, Int64}})
precompile(Tuple{Type{NamedTuple{(:event_ids,), T} where T<:Tuple}, Tuple{Array{Any, 1}}})
precompile(Tuple{Type{NamedTuple{(:event_id, :words), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, Int64}})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{ArgumentError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{Base.DimensionMismatch, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{UndefKeywordError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}})
precompile(Tuple{Type{NamedTuple{(:finalize,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:follower,), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{Type{NamedTuple{(:head, :tail), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:hours,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:ignore_loaded,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:indent, :header, :color, :percentage, :always_reprint), T} where T<:Tuple}, Tuple{Int64, String, Symbol, Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:interval,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{Type{NamedTuple{(:keycolumn, :valuecolumn), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{Type{NamedTuple{(:kind, :content), T} where T<:Tuple}, Tuple{Int64, String}})
precompile(Tuple{Type{NamedTuple{(:kind, :event_id, :offset, :limit), T} where T<:Tuple}, Tuple{Int64, String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:kind, :pubkey, :content), T} where T<:Tuple}, Tuple{Int64, PrimalServer.Nostr.PubKeyId, String}})
precompile(Tuple{Type{NamedTuple{(:kind, :tags), T} where T<:Tuple}, Tuple{Int64, Array{Any, 1}}})
precompile(Tuple{Type{NamedTuple{(:likes, :replies, :mentions, :reposts, :zaps, :satszapped, :score, :score24h), T} where T<:Tuple}, Array{Any, 1}})
precompile(Tuple{Type{NamedTuple{(:likes, :replies, :mentions, :reposts, :zaps, :satszapped, :score, :score24h), T} where T<:Tuple}, NTuple{8, Int64}})
precompile(Tuple{Type{NamedTuple{(:limit, :until, :user_pubkey, :pubkey, :include_replies), T} where T<:Tuple}, Tuple{Int64, Int64, String, String, Bool}})
precompile(Tuple{Type{NamedTuple{(:limit, :user_pubkey, :directive, :include_replies), T} where T<:Tuple}, Tuple{Int64, String, String, Bool}})
precompile(Tuple{Type{NamedTuple{(:limit, :user_pubkey, :pubkey, :since, :include_replies), T} where T<:Tuple}, Tuple{Int64, String, String, Int64, Bool}})
precompile(Tuple{Type{NamedTuple{(:mt,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:name, :uuid, :version, :path), T} where T<:Tuple}, Tuple{String, Base.UUID, Base.VersionNumber, String}})
precompile(Tuple{Type{NamedTuple{(:n, :factor), T} where T<:Tuple}, Tuple{Int64, Float64}})
precompile(Tuple{Type{NamedTuple{(:n,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:offset, :receiver, :limit), T} where T<:Tuple}, Tuple{Int64, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:order_by,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:order_by, :user_pubkey), T} where T<:Tuple}, Tuple{Symbol, Nothing}})
precompile(Tuple{Type{NamedTuple{(:pad,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:path, :size, :link), T} where T<:Tuple}, Tuple{String, Int64, String}})
precompile(Tuple{Type{NamedTuple{(:period, :t), T} where T<:Tuple}, Tuple{Float64, Float64}})
precompile(Tuple{Type{NamedTuple{(:period,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{Type{NamedTuple{(:period,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_liked_it), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{Type{NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_replied_to_it, :reply), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}})
precompile(Tuple{Type{NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_reposed_it), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{Type{NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_zapped_it, :satszapped), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}})
precompile(Tuple{Type{NamedTuple{(:post_you_were_mentioned_in, :who_liked_it), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{Type{NamedTuple{(:post_you_were_mentioned_in, :who_replied_to_it, :reply), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}})
precompile(Tuple{Type{NamedTuple{(:post_you_were_mentioned_in, :who_reposted_it), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{Type{NamedTuple{(:pubkey, :extended_response), T} where T<:Tuple}, Tuple{String, Bool}})
precompile(Tuple{Type{NamedTuple{(:pubkey, :followers_count), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.PubKeyId, Int64}})
precompile(Tuple{Type{NamedTuple{(:pubkey, :follows_count, :followers_count, :note_count, :long_form_note_count, :reply_count, :time_joined, :relay_count), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.PubKeyId, Int64, Int64, Int64, Int64, Int64, Nothing, Int64}})
precompile(Tuple{Type{NamedTuple{(:pubkey, :follows_count, :followers_count, :note_count, :long_form_note_count, :reply_count, :time_joined, :relay_count), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.PubKeyId, Vararg{Int64, 7}}})
precompile(Tuple{Type{NamedTuple{(:pubkey, :limit), T} where T<:Tuple}, Tuple{String, Int64}})
precompile(Tuple{Type{NamedTuple{(:pubkey, :notes, :limit), T} where T<:Tuple}, Tuple{String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:pubkey, :since, :limit), T} where T<:Tuple}, Tuple{String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:pubkeys,), T} where T<:Tuple}, Tuple{Array{Any, 1}}})
precompile(Tuple{Type{NamedTuple{(:pubkey,), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{Type{NamedTuple{(:pubkey,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:pubkey, :type_group, :limit), T} where T<:Tuple}, Tuple{String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:readonly,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:receiver, :since, :sender, :limit), T} where T<:Tuple}, Tuple{String, Int64, Nothing, Int64}})
precompile(Tuple{Type{NamedTuple{(:receiver, :since, :sender, :limit), T} where T<:Tuple}, Tuple{String, Int64, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:replied, :liked, :reposted, :zapped), T} where T<:Tuple}, Array{Bool, 1}})
precompile(Tuple{Type{NamedTuple{(:replied, :liked, :reposted, :zapped), T} where T<:Tuple}, NTuple{4, Bool}})
precompile(Tuple{Type{NamedTuple{(:res, :pks, :event_relays), T} where T<:Tuple}, Tuple{OrderedCollections.OrderedSet{Any}, Base.Set{PrimalServer.Nostr.PubKeyId}, Base.Dict{PrimalServer.Nostr.EventId, String}}})
precompile(Tuple{Type{NamedTuple{(:rounded,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:s, :a, :w, :h, :mt, :dur, :media_url), T} where T<:Tuple}, Tuple{Char, Int64, Int64, Int64, String, Float64, String}})
precompile(Tuple{Type{NamedTuple{(:since, :sender, :limit), T} where T<:Tuple}, Tuple{Int64, Nothing, Int64}})
precompile(Tuple{Type{NamedTuple{(:since, :until, :order_by), T} where T<:Tuple}, Tuple{Int64, Int64, Symbol}})
precompile(Tuple{Type{NamedTuple{(:started, :completed, :canceled), T} where T<:Tuple}, Tuple{Base.RefValue{Int64}, Base.RefValue{Int64}, Base.RefValue{Int64}}})
precompile(Tuple{Type{NamedTuple{(:stderr, :stdout), T} where T<:Tuple}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Base.DevNull}})
precompile(Tuple{Type{NamedTuple{(:table,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:timeframe, :scope, :created_after, :limit), T} where T<:Tuple}, Tuple{String, String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:timeframe, :scope, :limit), T} where T<:Tuple}, Tuple{String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:timeframe, :until, :scope, :created_after, :limit), T} where T<:Tuple}, Tuple{String, Int64, String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:timeframe, :until, :scope, :limit), T} where T<:Tuple}, Tuple{String, Int64, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:timeframe, :user_pubkey, :scope, :created_after, :limit), T} where T<:Tuple}, Tuple{String, String, String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:timeframe, :user_pubkey, :scope, :limit), T} where T<:Tuple}, Tuple{String, String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:timeframe, :user_pubkey, :scope, :since, :limit), T} where T<:Tuple}, Tuple{String, String, String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:timeframe, :user_pubkey, :until, :scope, :created_after, :limit), T} where T<:Tuple}, Tuple{String, String, Int64, String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:timeframe, :user_pubkey, :until, :scope, :limit), T} where T<:Tuple}, Tuple{String, String, Int64, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:total_zap_count, :total_satszapped), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:type,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:until, :pubkey, :limit), T} where T<:Tuple}, Tuple{Int64, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:until, :pubkey, :notes, :limit), T} where T<:Tuple}, Tuple{Int64, String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:until, :receiver, :sender, :limit), T} where T<:Tuple}, Tuple{Int64, String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:until, :user_pubkey, :pubkey, :limit), T} where T<:Tuple}, Tuple{Int64, String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:until, :user_pubkey, :pubkey, :type_group, :limit), T} where T<:Tuple}, Tuple{Int64, String, String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:url, :mimetype, :md_title, :md_description, :md_image, :icon_url), T} where T<:Tuple}, NTuple{6, String}})
precompile(Tuple{Type{NamedTuple{(:url, :variants), T} where T<:Tuple}, Tuple{String, Array{Any, 1}}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :directive, :limit), T} where T<:Tuple}, Tuple{String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :directive, :since, :limit), T} where T<:Tuple}, Tuple{String, String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :event_id, :limit), T} where T<:Tuple}, Tuple{String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :event_id, :offset, :limit), T} where T<:Tuple}, Tuple{String, String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :event_ids, :extended_response), T} where T<:Tuple}, Tuple{String, Array{Any, 1}, Bool}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :event_ids), T} where T<:Tuple}, Tuple{String, Array{Any, 1}}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :pubkey, :limit), T} where T<:Tuple}, Tuple{String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :pubkey, :notes, :limit), T} where T<:Tuple}, Tuple{String, String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :pubkey, :notes, :since, :limit), T} where T<:Tuple}, Tuple{String, String, String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :pubkey, :since, :limit), T} where T<:Tuple}, Tuple{String, String, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :pubkey, :since, :type_group, :limit), T} where T<:Tuple}, Tuple{String, String, Int64, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :pubkey), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :relation, :limit), T} where T<:Tuple}, Tuple{String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :relation), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :selector), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :until, :directive, :limit), T} where T<:Tuple}, Tuple{String, Int64, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:user_pubkey, :until, :pubkey, :notes, :limit), T} where T<:Tuple}, Tuple{String, Int64, String, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Base.SHA1, Base.VersionNumber}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Pkg.Versions.VersionSpec}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, String, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :version, :tree_hash), T} where T<:Tuple}, Tuple{Base.UUID, String, Base.VersionNumber, Base.SHA1}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :version, :tree_hash), T} where T<:Tuple}, Tuple{Base.UUID, String, Base.VersionNumber, Nothing}})
precompile(Tuple{Type{NamedTuple{(:your_follows, :your_inner_network, :your_outer_network, :all_users), T} where T<:Tuple}, NTuple{4, Int64}})
precompile(Tuple{Type{NamedTuple{(:your_post, :who_liked_it), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{Type{NamedTuple{(:your_post, :who_replied_to_it, :reply), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}})
precompile(Tuple{Type{NamedTuple{(:your_post, :who_reposted_it), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{Type{NamedTuple{(:your_post, :who_zapped_it, :satszapped), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}})
precompile(Tuple{Type{NamedTuple{(:your_post, :your_post_were_mentioned_in, :your_post_was_mentioned_by), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{Type{NamedTuple{(:you_were_mentioned_in,), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId}})
precompile(Tuple{Type{NamedTuple{(:you_were_mentioned_in, :you_were_mentioned_by), T} where T<:Tuple}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.all), Array{Bool, 1}})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base.alloc_buf_hook), Sockets.TCPSocket, UInt64})
precompile(Tuple{typeof(Base._all_tuple), Function, Bool})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base.append!), PrimalServer.Utils.ThreadSafe{Array{Any, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.append!), PrimalServer.Utils.ThreadSafe{Array{Any, 1}}, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base.append!), PrimalServer.Utils.ThreadSafe{Array{Any, 1}}, Array{Tuple, 1}})
precompile(Tuple{typeof(Base.append!), PrimalServer.Utils.ThreadSafe{Array{Any, 1}}, Array{Tuple{Array{UInt8, 1}, Int64}, 1}})
precompile(Tuple{typeof(Base.argtail), StaticArrays.SOneTo{32}})
precompile(Tuple{typeof(Base._array_for), Type{Array{UInt8, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Bool}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base._array_for), Type{Int32}, Array{DataType, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._array_for), Type{Pair{DataType, Int32}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Pair{Int32, DataType}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Pair{String, Int64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Pair{Symbol, Array{Any, 1}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Pair{Symbol, Int64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Pair{Symbol, String}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, NTuple{8, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{String, Int64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{UInt8}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.:(|>)), Array{UInt8, 1}, Type{PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Base.Dict{String, Int64}})
precompile(Tuple{typeof(Base.:(|>)), Base.Dict{Symbol, PrimalServer.App.CachedFunction}, Type{PrimalServer.Utils.ThreadSafe{T} where T}})
precompile(Tuple{typeof(Base.:(>)), Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.:(+)), Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr, Vararg{Expr}})
precompile(Tuple{typeof(Base.__cat), Array{Any, 1}, Tuple{Int64}, Tuple{Bool}, Array{Any, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Any, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Array{Any, 1}, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base.cat_similar), Array{Any, 1}, Type{Any}, Tuple{Int64}})
precompile(Tuple{typeof(Base.cat_size_shape), Tuple{Bool}, Array{Any, 1}, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{Any}, Array{Any, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Int8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Ptr{UInt64}}}, Ptr{Ptr{UInt64}}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{UInt8}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Base.checkbounds), StaticArrays.SOneTo{32}, Int64})
precompile(Tuple{typeof(Base.close), Base.DevNull})
precompile(Tuple{typeof(Base.close), Base.Timer})
precompile(Tuple{typeof(Base.cmp), Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Type{Bool}}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Type{Tuple}}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(Base.string)}})
precompile(Tuple{typeof(Base.collect), StaticArraysCore.SArray{Tuple{32}, UInt8, 1, 32}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Any, 1}, Type{Bool}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{UInt8, 1}, Int64}, 1}, Tuple{Array{UInt8, 1}, Int64}, Base.Generator{Array{Any, 1}, Type{Tuple}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{UInt8, 1}, Int64, Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}, Int64}, 1}, Tuple{Array{UInt8, 1}, Int64, Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}, Int64}, Base.Generator{Array{Any, 1}, Type{Tuple}}, Int64})
precompile(Tuple{typeof(Base.collect), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId}})
precompile(Tuple{typeof(Base.collect), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.collect), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}})
precompile(Tuple{typeof(Base.collect), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}})
precompile(Tuple{typeof(Base.collect), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.collect), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}})
precompile(Tuple{typeof(Base.collect), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}})
precompile(Tuple{typeof(Base.collect), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Union{Array{String, 1}, String}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, Type{Int64}}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, Type{Int64}}})
precompile(Tuple{typeof(Base.convert), Type{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.convert), Type{Dates.DateTime}, Dates.DateTime})
precompile(Tuple{typeof(Base.convert), Type{HTTP.Cookies.SameSite}, HTTP.Cookies.SameSite})
precompile(Tuple{typeof(Base.convert), Type{HTTP.Strings.HTTPVersion}, HTTP.Strings.HTTPVersion})
precompile(Tuple{typeof(Base.convert), Type{Int16}, Int16})
precompile(Tuple{typeof(Base.convert), Type{Int64}, UInt32})
precompile(Tuple{typeof(Base.convert), Type{LineNumberNode}, LineNumberNode})
precompile(Tuple{typeof(Base.convert), Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.UUID}}, Base.UUID})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Pkg.Types.UpgradeLevel, Base.VersionNumber, Pkg.Versions.VersionSpec}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.:(==)), Dates.AMPM, Dates.AMPM})
precompile(Tuple{typeof(Base.:(==)), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.:(==)), Decimals.Decimal, Decimals.Decimal})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{String, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{NamedTuple{(:kind, :content), Tuple{Int64, String}}}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Pair{Symbol, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Pair{Symbol, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{PrimalServer.Nostr.Event}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{PrimalServer.Nostr.EventId}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{DataType}, Type{Int32}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Int32}, Type{DataType}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{PrimalServer.Bech32.TLVType}, Type{Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{PrimalServer.Bech32.TLVType}, Type{String}})
precompile(Tuple{typeof(Base.empty), Base.Dict{DataType, Int32}, Type{Type}, Type{Int32}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Int32, DataType}, Type{Int32}, Type{Type}})
precompile(Tuple{typeof(Base.empty), Base.Dict{PrimalServer.Bech32.TLVType, Int64}, Type{PrimalServer.Bech32.TLVType}, Type{Any}})
precompile(Tuple{typeof(Base.empty), Base.Dict{PrimalServer.Bech32.TLVType, String}, Type{PrimalServer.Bech32.TLVType}, Type{Any}})
precompile(Tuple{typeof(Base.empty!), Base.Set{String}})
precompile(Tuple{typeof(Base.empty!), PrimalServer.Utils.ThreadSafe{Base.Dict{PrimalServer.Nostr.EventId, Any}}})
precompile(Tuple{typeof(Base.empty!), PrimalServer.Utils.ThreadSafe{Base.Dict{Tuple{PrimalServer.Nostr.EventId, Union{Nothing, PrimalServer.Nostr.PubKeyId}}, Any}}})
precompile(Tuple{typeof(Base.eof), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{typeof(Base.filter), Function, Tuple{}})
precompile(Tuple{typeof(Base.findfirst), Char, String})
precompile(Tuple{typeof(Base.findfirst), Function, Array{String, 1}})
precompile(Tuple{typeof(Base.first), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.first), Array{Tuple, 1}, Int64})
precompile(Tuple{typeof(Base.first), Array{Tuple{Array{UInt8, 1}, Int64, Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Base.fld), Int64, Int64})
precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, Bool})
precompile(Tuple{typeof(Base.get), Base.Dict{Tuple{PrimalServer.Nostr.EventId, Union{Nothing, PrimalServer.Nostr.PubKeyId}}, Any}, Tuple{PrimalServer.Nostr.EventId, Nothing}, Nothing})
precompile(Tuple{typeof(Base.get), Base.Dict{Tuple{PrimalServer.Nostr.EventId, Union{Nothing, PrimalServer.Nostr.PubKeyId}}, Any}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}, Nothing})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubString{String}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{PrimalServer.Nostr.EventId, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{PrimalServer.Nostr.PubKeyId, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{UInt8, 1}, Int64, Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}, Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{PrimalServer.Bech32.TLVType, Any}, PrimalServer.Bech32.TLVType})
precompile(Tuple{typeof(Base.getindex), Base.Dict{PrimalServer.DB.NotificationType, Tuple{Tuple{Symbol, DataType}, Vararg{Tuple{Symbol, DataType}}}}, PrimalServer.DB.NotificationType})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Type, Int32}, Type})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Bool}})
precompile(Tuple{typeof(Base.getindex), Pair{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.getindex), PrimalServer.Utils.ThreadSafe{Base.Dict{Symbol, Int64}}, Symbol})
precompile(Tuple{typeof(Base.getindex), PrimalServer.Utils.ThreadSafe{Base.RefValue{Any}}})
precompile(Tuple{typeof(Base.getindex), String, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Pair{Symbol, Any}}, Pair{Symbol, Int32}, Pair{Symbol, Int64}, Pair{Symbol, PrimalServer.Nostr.EventId}})
precompile(Tuple{typeof(Base.getindex), Type{Pair{Symbol, Any}}, Pair{Symbol, Int64}, Pair{Symbol, Int64}, Pair{Symbol, PrimalServer.Nostr.EventId}})
precompile(Tuple{typeof(Base.getindex), Type{Ptr{UInt64}}})
precompile(Tuple{typeof(Base.getindex), Type{Tuple{Type, Int32}}, Tuple{DataType, Int64}, Tuple{DataType, Int64}, Tuple{DataType, Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.get), PrimalServer.Utils.ThreadSafe{Base.Dict{Tuple{PrimalServer.Nostr.EventId, Union{Nothing, PrimalServer.Nostr.PubKeyId}}, Any}}, Tuple{PrimalServer.Nostr.EventId, Nothing}, Nothing})
precompile(Tuple{typeof(Base.get), PrimalServer.Utils.ThreadSafe{Base.Dict{Tuple{PrimalServer.Nostr.EventId, Union{Nothing, PrimalServer.Nostr.PubKeyId}}, Any}}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}, Nothing})
precompile(Tuple{typeof(Base.getproperty), Base.Set{String}, Symbol})
precompile(Tuple{typeof(Base.getproperty), HTTP.ConnectionPool.ConnectionPools.Pool{HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), HTTP.Messages.Response, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:kind, :content), Tuple{Int64, String}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:kind, :tags), Tuple{Int64, Array{Any, 1}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :follower), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.PubKeyId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_reposed_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_reposted_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_reposted_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :your_post, :your_post_were_mentioned_in, :your_post_was_mentioned_by), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :you_were_mentioned_in), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:pubkey, :created_at, :type, :you_were_mentioned_in, :you_were_mentioned_by), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:res, :pks, :event_relays), Tuple{OrderedCollections.OrderedSet{Any}, Base.Set{PrimalServer.Nostr.PubKeyId}, Base.Dict{PrimalServer.Nostr.EventId, String}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:rootdirectory,), Tuple{String}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.DB.DBConversionFuncs, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Nostr.EventId, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Nostr.Event, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Nostr.TagAny, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Utils.ThreadSafe{Array{Any, 1}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Utils.ThreadSafe{Base.Dict{Any, Any}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Utils.ThreadSafe{Base.Dict{PrimalServer.Nostr.EventId, Any}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Utils.ThreadSafe{Base.Dict{Symbol, Int64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Utils.ThreadSafe{Base.Dict{Symbol, PrimalServer.App.CachedFunction}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Utils.ThreadSafe{Base.Dict{Tuple{PrimalServer.Nostr.EventId, Union{Nothing, PrimalServer.Nostr.PubKeyId}}, Any}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Utils.ThreadSafe{Base.RefValue{Any}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Utils.ThreadSafe{Base.RefValue{Bool}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), PrimalServer.Utils.ThreadSafe{Base.Set{Any}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), URIs.URI, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{DataType, Int32}, Array{Pair{_A, Int32} where _A, 1}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Int32, DataType}, Array{Pair{Int32, _A} where _A, 1}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Int32, Type}, Array{Pair{Int32, _A} where _A, 1}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{PrimalServer.Bech32.TLVType, Any}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{PrimalServer.Bech32.TLVType, Int64}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{PrimalServer.Bech32.TLVType, String}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Type, Int32}, Array{Pair{_A, Int32} where _A, 1}, Int64})
precompile(Tuple{typeof(Base.hashindex), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.hashindex), NamedTuple{(:kind, :content), Tuple{Int64, String}}, Int64})
precompile(Tuple{typeof(Base.hashindex), PrimalServer.Nostr.Event, Int64})
precompile(Tuple{typeof(Base.hashindex), PrimalServer.Nostr.PubKeyId, Int64})
precompile(Tuple{typeof(Base.hashindex), PrimalServer.Nostr.TagAny, Int64})
precompile(Tuple{typeof(Base.hashindex), Symbol, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{PrimalServer.Nostr.EventId, Nothing}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}, Int64})
precompile(Tuple{typeof(Base.hash), Tuple{Int64}, UInt64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, PrimalServer.Nostr.PubKeyId})
precompile(Tuple{typeof(Base.haskey), PrimalServer.Utils.ThreadSafe{Base.Dict{Symbol, Int64}}, Symbol})
precompile(Tuple{typeof(Base.hton), Int16})
precompile(Tuple{typeof(Base.hton), Int32})
precompile(Tuple{typeof(Base.ifelse), Bool, Float64, Float64})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Char, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Char, Int64, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{ArgumentError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{ArgumentError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{Base.DimensionMismatch, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{Base.DimensionMismatch, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{BoundsError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{BoundsError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{MethodError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{MethodError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{UndefKeywordError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{UndefKeywordError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{UInt8, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{UInt8, 1}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{PrimalServer.Bech32.TLVType, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{PrimalServer.Bech32.TLVType, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{PrimalServer.Bech32.TLVType, PrimalServer.Nostr.PubKeyId}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{PrimalServer.Bech32.TLVType, PrimalServer.Nostr.PubKeyId}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{PrimalServer.Bech32.TLVType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{PrimalServer.Bech32.TLVType, String}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{PrimalServer.Nostr.PubKeyId, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{PrimalServer.Nostr.PubKeyId, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.in), Function, Tuple{typeof(Base.:(+)), typeof(Base.:(-)), typeof(Base.:(*)), typeof(Base.:(/))}})
precompile(Tuple{typeof(Base.in), PrimalServer.Nostr.EventId, PrimalServer.Utils.ThreadSafe{Base.Set{PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.in), PrimalServer.Nostr.EventId, PrimalServer.Utils.ThreadSafe{OrderedCollections.OrderedSet{PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.in), PrimalServer.Nostr.PubKeyId, PrimalServer.Utils.ThreadSafe{Base.Set{PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.in!), PrimalServer.Nostr.TagAny, Base.Set{Any}})
precompile(Tuple{typeof(Base.in), String, Base.Set{String}})
precompile(Tuple{typeof(Base.:(!=)), Int32, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{typeof(Base.:(+)), Int64, Bool})
precompile(Tuple{typeof(Base.:(<)), Int64, Int32})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(Base.:(|>)), Int64, typeof(Base.identity)})
precompile(Tuple{typeof(Base.:(&)), Int64, UInt32})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:event_id, :limit), Tuple{String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:event_ids,), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:kind, :event_id, :offset, :limit), Tuple{Int64, String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:limit, :until, :user_pubkey, :pubkey, :include_replies), Tuple{Int64, Int64, String, String, Bool}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:limit, :user_pubkey, :directive, :include_replies), Tuple{Int64, String, String, Bool}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:limit, :user_pubkey, :pubkey, :since, :include_replies), Tuple{Int64, String, String, Int64, Bool}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:offset, :receiver, :limit), Tuple{Int64, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:pubkey, :extended_response), Tuple{String, Bool}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:pubkey, :limit), Tuple{String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:pubkey, :notes, :limit), Tuple{String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:pubkey, :since, :limit), Tuple{String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:pubkeys,), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:pubkey,), Tuple{String}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:pubkey, :type_group, :limit), Tuple{String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:receiver, :since, :sender, :limit), Tuple{String, Int64, Nothing, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:receiver, :since, :sender, :limit), Tuple{String, Int64, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:since, :sender, :limit), Tuple{Int64, Nothing, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:timeframe, :scope, :created_after, :limit), Tuple{String, String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:timeframe, :scope, :limit), Tuple{String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:timeframe, :until, :scope, :created_after, :limit), Tuple{String, Int64, String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:timeframe, :until, :scope, :limit), Tuple{String, Int64, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:timeframe, :user_pubkey, :scope, :created_after, :limit), Tuple{String, String, String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:timeframe, :user_pubkey, :scope, :limit), Tuple{String, String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:timeframe, :user_pubkey, :scope, :since, :limit), Tuple{String, String, String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:timeframe, :user_pubkey, :until, :scope, :created_after, :limit), Tuple{String, String, Int64, String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:timeframe, :user_pubkey, :until, :scope, :limit), Tuple{String, String, Int64, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:until, :pubkey, :limit), Tuple{Int64, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:until, :pubkey, :notes, :limit), Tuple{Int64, String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:until, :receiver, :sender, :limit), Tuple{Int64, String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:until, :user_pubkey, :pubkey, :limit), Tuple{Int64, String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:until, :user_pubkey, :pubkey, :type_group, :limit), Tuple{Int64, String, String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :directive, :limit), Tuple{String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :directive, :since, :limit), Tuple{String, String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :event_id, :limit), Tuple{String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :event_id, :offset, :limit), Tuple{String, String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :event_ids, :extended_response), Tuple{String, Array{Any, 1}, Bool}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :event_ids), Tuple{String, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :pubkey, :limit), Tuple{String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :pubkey, :notes, :limit), Tuple{String, String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :pubkey, :notes, :since, :limit), Tuple{String, String, String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :pubkey, :since, :limit), Tuple{String, String, Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :pubkey, :since, :type_group, :limit), Tuple{String, String, Int64, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :pubkey), Tuple{String, String}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :relation, :limit), Tuple{String, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :relation), Tuple{String, String}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :selector), Tuple{String, String}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey,), Tuple{String}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :until, :directive, :limit), Tuple{String, Int64, String, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:user_pubkey, :until, :pubkey, :notes, :limit), Tuple{String, Int64, String, String, Int64}}})
precompile(Tuple{typeof(Base.isequal), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:kind, :content), Tuple{Int64, String}}, NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:kind, :content), Tuple{Int64, String}}, PrimalServer.Nostr.Event})
precompile(Tuple{typeof(Base.isequal), PrimalServer.Nostr.Event, NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.isequal), PrimalServer.Nostr.Event, PrimalServer.Nostr.Event})
precompile(Tuple{typeof(Base.isequal), Tuple{DataType, String, String, Bool, Bool}, Tuple{DataType, Base.SubString{String}, Base.SubString{String}, Bool, Bool}})
precompile(Tuple{typeof(Base.iterate), Array{PrimalServer.Nostr.EventId, 1}})
precompile(Tuple{typeof(Base.iterate), Array{PrimalServer.Nostr.EventId, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{PrimalServer.Nostr.PubKeyId, 1}})
precompile(Tuple{typeof(Base.iterate), Array{PrimalServer.Nostr.PubKeyId, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{PrimalServer.Nostr.Tag, 1}})
precompile(Tuple{typeof(Base.iterate), Array{PrimalServer.Nostr.Tag, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Int64}, Tuple{Int64, Nothing}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{32}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{32}, Int64})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{64}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{64}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, NTuple{7, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, NTuple{7, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{Any, 1}, Int64}, NTuple{4, Tuple{Symbol, DataType}}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{Any, 1}, Nothing}, Tuple{Tuple{Symbol, DataType}, Tuple{Symbol, DataType}, Tuple{Symbol, DataType}}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{Any, 1}, String}, NTuple{4, Tuple{Symbol, DataType}}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Int64, Nothing}, Tuple{Tuple{Symbol, DataType}, Tuple{Symbol, DataType}, Tuple{Symbol, DataType}}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Nothing, Nothing}, Tuple{Tuple{Symbol, DataType}, Tuple{Symbol, DataType}}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Array{UInt8, 1}, Array{UInt8, 1}, String, Int64}, NTuple{4, Tuple{Symbol, DataType}}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Array{UInt8, 1}, Array{UInt8, 1}, String, Nothing}, Tuple{Tuple{Symbol, DataType}, Tuple{Symbol, DataType}, Tuple{Symbol, DataType}}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Array{UInt8, 1}, Array{UInt8, 1}, String, String}, NTuple{4, Tuple{Symbol, DataType}}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Array{UInt8, 1}, Nothing, Nothing, Nothing}, Tuple{Tuple{Symbol, DataType}}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Array{UInt8, 1}, Nothing, Nothing, Nothing}, Tuple{Tuple{Symbol, DataType}, Tuple{Symbol, DataType}}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 1}, String})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.length), Array{Int64, 1}})
precompile(Tuple{typeof(Base.length), Array{Ptr{UInt64}, 1}})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{typeof(Base.length), PrimalServer.Utils.ThreadSafe{Array{Any, 1}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{-32}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{4}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Type{Int64}, typeof(Base.:(*)), Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Type{Int64}, typeof(Base.min), Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldr), Function, Function, Tuple{}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Base._InitialValue, Tuple{}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Function, Array{Function, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.map), Type, Array{Any, 1}})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Tuple{StaticArrays.SOneTo{32}, Int64}, Tuple{StaticArrays.SOneTo{32}, Int64}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Int32, Type}, Base.Dict{Int32, DataType}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{PrimalServer.Bech32.TLVType, Any}, Base.Dict{PrimalServer.Bech32.TLVType, Int64}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{PrimalServer.Bech32.TLVType, Any}, Base.Dict{PrimalServer.Bech32.TLVType, String}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Int64}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Type, Int32}, Base.Dict{DataType, Int32}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:event_id,), Tuple{PrimalServer.Nostr.EventId}}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:event_id,), Tuple{PrimalServer.Nostr.EventId}}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:event_id,), Tuple{PrimalServer.Nostr.EventId}}, NamedTuple{(:likes, :replies, :mentions, :reposts, :zaps, :satszapped, :score, :score24h), NTuple{8, Int64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:event_id,), Tuple{PrimalServer.Nostr.EventId}}, NamedTuple{(:replied, :liked, :reposted, :zapped), NTuple{4, Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, Array{Pair{Symbol, _A} where _A, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, Array{Pair{Symbol, PrimalServer.Nostr.EventId}, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, Array{Pair{Symbol, PrimalServer.Nostr.PubKeyId}, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:follower,), Tuple{PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_liked_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_reposed_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:post_you_were_mentioned_in, :who_liked_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:post_you_were_mentioned_in, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:post_you_were_mentioned_in, :who_reposted_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:your_post, :who_liked_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:your_post, :who_reposted_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:your_post, :your_post_were_mentioned_in, :your_post_was_mentioned_by), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:you_were_mentioned_in,), Tuple{PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :created_at, :type), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType}}, NamedTuple{(:you_were_mentioned_in, :you_were_mentioned_by), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :follows_count, :followers_count, :note_count, :long_form_note_count, :reply_count, :time_joined, :relay_count), Tuple{PrimalServer.Nostr.PubKeyId, Int64, Int64, Int64, Int64, Int64, Nothing, Int64}}, NamedTuple{(:total_zap_count, :total_satszapped), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey, :follows_count, :followers_count, :note_count, :long_form_note_count, :reply_count, :time_joined, :relay_count), Tuple{PrimalServer.Nostr.PubKeyId, Vararg{Int64, 7}}}, NamedTuple{(:total_zap_count, :total_satszapped), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey,), Tuple{PrimalServer.Nostr.PubKeyId}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:user_pubkey, :limit), Tuple{String, Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey,), Tuple{PrimalServer.Nostr.PubKeyId}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:limit, :user_pubkey, :include_replies), Tuple{Int64, String, Bool}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:pubkey,), Tuple{PrimalServer.Nostr.PubKeyId}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:user_pubkey, :since, :limit), Tuple{String, Int64, Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:table,), Tuple{String}}, Base.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:keycolumn, :valuecolumn), Tuple{String, String}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Pair{Symbol, Array{Any, 1}}, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Pair{Symbol, _A} where _A, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Pair{Symbol, String}, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:init_queries,), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:keycolumn, :valuecolumn, :init_extra_indexes), Tuple{String, String, Array{String, 1}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:keycolumn, :valuecolumn, :init_queries), Tuple{String, String, Array{String, 1}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:keycolumn, :valuecolumn), Tuple{String, String}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:url, :variants), Tuple{String, Array{Any, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:url, :variants), Tuple{String, Array{Any, 1}}}, Array{Pair{Symbol, String}, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:url, :variants), Tuple{String, Array{Any, 1}}}, NamedTuple{(:mt,), Tuple{String}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{typeof(Base.:(|>)), Module, typeof(Base.string)})
precompile(Tuple{typeof(Base.:(|>)), Nothing, typeof(Base.string)})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:created_after, :limit, :include_replies), Tuple{Int64, Int64, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:created_after, :limit), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:created_after, :since, :limit), Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:created_after, :until, :limit), Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:follower,), Tuple{PrimalServer.Nostr.PubKeyId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:init_extra_indexes,), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:init_queries,), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:iofunction, :decompress, :verbose), Tuple{Nothing, Nothing, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:keycolumn, :init_queries), Tuple{String, Array{String, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:keycolumn, :valuecolumn, :init_queries), Tuple{String, String, Array{String, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:keycolumn, :valuecolumn), Tuple{String, String}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:likes, :replies, :mentions, :reposts, :zaps, :satszapped, :score, :score24h), NTuple{8, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:limit, :created_after, :group_by_pubkey), Tuple{Int64, Int64, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:limit,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:limit, :user_pubkey, :include_replies), Tuple{Int64, String, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:mt,), Tuple{String}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_liked_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_reposed_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:post_your_post_was_mentioned_in, :your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:post_you_were_mentioned_in, :who_liked_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:post_you_were_mentioned_in, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:post_you_were_mentioned_in, :who_reposted_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:readtimeout, :iofunction, :decompress, :verbose), Tuple{Int64, Nothing, Nothing, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:replied, :liked, :reposted, :zapped), NTuple{4, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:response_stream,), Tuple{Nothing}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{HTTP.Cookies.Cookie, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Pair{PrimalServer.Nostr.PubKeyId, Base.Dict{Symbol, Any}}, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Pair{String, Float32}, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{PrimalServer.Nostr.PubKeyId, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Tuple, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Tuple{Array{UInt8, 1}, Int64, Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}, Int64}, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Tuple{PrimalServer.Nostr.EventId, Int64}, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:since, :limit), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:total_zap_count, :total_satszapped), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:until, :created_after, :limit), Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:until, :limit), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:user_pubkey, :limit), Tuple{String, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:user_pubkey, :since, :limit), Tuple{String, Int64, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:verbose,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:your_post, :who_liked_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:your_post, :who_reposted_it), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:your_post, :your_post_were_mentioned_in, :your_post_was_mentioned_by), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:you_were_mentioned_in,), Tuple{PrimalServer.Nostr.EventId}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:you_were_mentioned_in, :you_were_mentioned_by), Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:keycolumn, :valuecolumn), Tuple{String, String}}})
precompile(Tuple{typeof(Base.parse), Type{Int64}, Base.SubString{String}})
precompile(Tuple{typeof(Base.pointer), Array{Ptr{UInt64}, 1}})
precompile(Tuple{typeof(Base.pointer), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.pointer), String})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.:(|>)), PrimalServer.DB.NotificationType, Type{Int64}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt16})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Module, String})
precompile(Tuple{typeof(Base.print), Base.TTY, Int32, String, Vararg{String}})
precompile(Tuple{typeof(Base.println), Base.TTY, Int32, Vararg{Any}})
precompile(Tuple{typeof(Base.println), Base.TTY, LoadError})
precompile(Tuple{typeof(Base.println), Base.TTY, Module})
precompile(Tuple{typeof(Base.println), LoadError})
precompile(Tuple{typeof(Base.println), Module})
precompile(Tuple{typeof(Base.prod), StaticArraysCore.Size{(32,)}})
precompile(Tuple{typeof(Base.prod), StaticArraysCore.Size{(64,)}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{typeof(Base.promote_eltype), Array{Any, 1}, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:kind, :content), Tuple{Int64, String}}, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:kind, :content), Tuple{Int64, String}}, NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:kind, :content), Tuple{Int64, String}}, NamedTuple{(:kind, :content), Tuple{Int64, String}}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:kind, :content), Tuple{Int64, String}}, NamedTuple{(:kind, :content), Tuple{Int64, String}}, Vararg{NamedTuple{(:kind, :content), Tuple{Int64, String}}}})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:kind, :content), Tuple{Int64, String}}, PrimalServer.Nostr.Event, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Pair{Symbol, Int32}, Pair{Symbol, Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Pair{Symbol, Int64}, Pair{Symbol, Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Pair{Symbol, Int64}, Pair{Symbol, PrimalServer.Nostr.EventId}})
precompile(Tuple{typeof(Base.promote_typeof), PrimalServer.Nostr.Event, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base.promote_typeof), PrimalServer.Nostr.Event, NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.promote_typeof), PrimalServer.Nostr.Event, NamedTuple{(:kind, :content), Tuple{Int64, String}}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), PrimalServer.Nostr.Event, NamedTuple{(:kind, :content), Tuple{Int64, String}}, Vararg{NamedTuple{(:kind, :content), Tuple{Int64, String}}}})
precompile(Tuple{typeof(Base.promote_typeof), PrimalServer.Nostr.Event, PrimalServer.Nostr.Event, Vararg{Any}})
precompile(Tuple{typeof(Base._promote_typesubtract), Any})
precompile(Tuple{typeof(Base.promote_type), Type{Pair{Symbol, Int32}}, Type{Pair{Symbol, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Pair{Symbol, Int64}}, Type{Pair{Symbol, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{PrimalServer.Nostr.Event}, Type{Any}})
precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Char})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}, NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.push!), Array{Pair{Symbol, PrimalServer.Nostr.EventId}, 1}, Pair{Symbol, PrimalServer.Nostr.EventId}})
precompile(Tuple{typeof(Base.push!), Array{Pair{Symbol, PrimalServer.Nostr.PubKeyId}, 1}, Pair{Symbol, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.push!), Array{PrimalServer.Nostr.Event, 1}, PrimalServer.Nostr.Event})
precompile(Tuple{typeof(Base.push!), Array{PrimalServer.Nostr.EventId, 1}, PrimalServer.Nostr.EventId})
precompile(Tuple{typeof(Base.push!), Array{PrimalServer.Nostr.PubKeyId, 1}, PrimalServer.Nostr.PubKeyId})
precompile(Tuple{typeof(Base.push!), Array{Ptr{UInt64}, 1}, Ptr{UInt64}})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Tuple{PrimalServer.Nostr.EventId, Int64}, 1}, Tuple{PrimalServer.Nostr.EventId, Int64}})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Array{String, 1}})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, PrimalServer.Nostr.TagAny})
precompile(Tuple{typeof(Base.push!), Base.Set{PrimalServer.Nostr.PubKeyId}, PrimalServer.Nostr.PubKeyId})
precompile(Tuple{typeof(Base.push!), OrderedCollections.OrderedSet{Any}, NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.push!), OrderedCollections.OrderedSet{Any}, PrimalServer.Nostr.Event})
precompile(Tuple{typeof(Base.push!), PrimalServer.Utils.ThreadSafe{Array{Any, 1}}, NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.push!), PrimalServer.Utils.ThreadSafe{Array{Any, 1}}, PrimalServer.Nostr.Event})
precompile(Tuple{typeof(Base.push!), PrimalServer.Utils.ThreadSafe{Array{Any, 1}}, Tuple{Array{UInt8, 1}, Int64}})
precompile(Tuple{typeof(Base.push!), PrimalServer.Utils.ThreadSafe{Array{Any, 1}}, Tuple{PrimalServer.Nostr.PubKeyId, Int64}})
precompile(Tuple{typeof(Base.push!), PrimalServer.Utils.ThreadSafe{Base.Set{Any}}, PrimalServer.Nostr.Event})
precompile(Tuple{typeof(Base.push_widen), Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}, PrimalServer.Nostr.Event})
precompile(Tuple{typeof(Base.push_widen), Array{Pair{Symbol, PrimalServer.Nostr.EventId}, 1}, Pair{Symbol, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.push_widen), Array{PrimalServer.Nostr.Event, 1}, NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.readbytes!), Base.PipeEndpoint, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Ptr{UInt64}}, Int64})
precompile(Tuple{typeof(Base.rem), UInt8, Type{UInt64}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int32, 1}, Int32, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Ptr{UInt64}, 1}, Ptr{UInt64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Any, PrimalServer.Nostr.PubKeyId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Any, Tuple{Symbol, NamedTuple{(:hours,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Int32}, Int32, Type{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Int32}, Int32, Type{Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Int32}, Int32, Type{Dates.DateTime}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Int32}, Int32, Type{Decimals.Decimal}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Int32}, Int32, Type{Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Int32}, Int32, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Int32}, Int32, Type{Int32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Int32}, Int32, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Int32}, Int32, Type{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int32, DataType}, Type, Int32})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int32, Function}, Function, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{PrimalServer.Bech32.TLVType, Int64}, Int64, PrimalServer.Bech32.TLVType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{PrimalServer.Bech32.TLVType, String}, String, PrimalServer.Bech32.TLVType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{PrimalServer.Nostr.PubKeyId, Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Any}, PrimalServer.Nostr.PubKeyId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Array{String, 1}, String}}, Array{String, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PrimalServer.App.CachedFunction}, PrimalServer.App.CachedFunction, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Base.PkgId, Union{Nothing, String}}, Union{Nothing, Tuple{Union{Nothing, String}, Union{Nothing, String}}}}, Tuple{Nothing, String}, Tuple{Base.PkgId, Nothing}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{PrimalServer.Nostr.EventId, Union{Nothing, PrimalServer.Nostr.PubKeyId}}, Any}, Any, Tuple{PrimalServer.Nostr.EventId, Nothing}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{PrimalServer.Nostr.EventId, Union{Nothing, PrimalServer.Nostr.PubKeyId}}, Any}, Any, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{Dates.DateTime}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{Decimals.Decimal}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{Int32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Int32}, Int32, Type{String}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Float64}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Union{Nothing, PrimalServer.Utils.GCTask}}, PrimalServer.Utils.GCTask})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Union{Nothing, Task}}, Task})
precompile(Tuple{typeof(Base.setindex!), PrimalServer.Utils.ThreadSafe{Base.Dict{Any, Any}}, Array{Any, 1}, Tuple{Symbol, NamedTuple{(:hours,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), PrimalServer.Utils.ThreadSafe{Base.Dict{Any, Any}}, PrimalServer.Nostr.Event, PrimalServer.Nostr.PubKeyId})
precompile(Tuple{typeof(Base.setindex!), PrimalServer.Utils.ThreadSafe{Base.Dict{Symbol, PrimalServer.App.CachedFunction}}, PrimalServer.App.CachedFunction, Symbol})
precompile(Tuple{typeof(Base.setindex!), PrimalServer.Utils.ThreadSafe{Base.Dict{Tuple{PrimalServer.Nostr.EventId, Union{Nothing, PrimalServer.Nostr.PubKeyId}}, Any}}, NamedTuple{(:res, :pks, :event_relays), Tuple{OrderedCollections.OrderedSet{Any}, Base.Set{PrimalServer.Nostr.PubKeyId}, Base.Dict{PrimalServer.Nostr.EventId, String}}}, Tuple{PrimalServer.Nostr.EventId, Nothing}})
precompile(Tuple{typeof(Base.setindex!), PrimalServer.Utils.ThreadSafe{Base.Dict{Tuple{PrimalServer.Nostr.EventId, Union{Nothing, PrimalServer.Nostr.PubKeyId}}, Any}}, NamedTuple{(:res, :pks, :event_relays), Tuple{OrderedCollections.OrderedSet{Any}, Base.Set{PrimalServer.Nostr.PubKeyId}, Base.Dict{PrimalServer.Nostr.EventId, String}}}, Tuple{PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{DataType, Int32}, 1}, Pair{UnionAll, Int32}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{Int32, DataType}, 1}, Pair{Int32, UnionAll}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{Symbol, Int64}, 1}, Pair{Symbol, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{Symbol, Int64}, 1}, Pair{Symbol, String}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{Symbol, String}, 1}, Pair{Symbol, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{Symbol, String}, 1}, Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{Symbol, String}, 1}, Pair{Symbol, Int64}, Int64})
precompile(Tuple{typeof(Base.setproperty!), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), OrderedCollections.OrderedDict{Any, Nothing}, Symbol, Int64})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageEntry, Symbol, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.Project, Symbol, Base.UUID})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.Project, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.setproperty!), Sockets.TCPSocket, Symbol, Int64})
precompile(Tuple{typeof(Base.setup_stdio), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Float64, String, Tuple{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Float64, String, Tuple{Array{UInt8, 1}, Int64}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Float64, String, Tuple{Array{UInt8, 1}, Vararg{Int64, 4}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Float64, String, Tuple{Array{UInt8, 1}, Vararg{Int64, 5}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Float64, String, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Function})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int32})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Array{UInt8, 1}, Int64}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Array{UInt8, 1}, Vararg{Int64, 4}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Array{UInt8, 1}, Vararg{Int64, 5}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, String})
precompile(Tuple{typeof(Base.showerror), Base.TTY, ArgumentError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.showerror), Base.TTY, Base.DimensionMismatch, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.showerror), Base.TTY, BoundsError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.showerror), Base.TTY, MethodError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.showerror), Base.TTY, UndefKeywordError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.showerror), Base.TTY, UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.show_index), Base.TTY, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, QuoteNode, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.signbit), Int64})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}})
precompile(Tuple{typeof(Base.sizeof), ArgumentError})
precompile(Tuple{typeof(Base.sizeof), Function})
precompile(Tuple{typeof(Base.sizeof), LoadError})
precompile(Tuple{typeof(Base.sizeof), UndefVarError})
precompile(Tuple{typeof(Base.size), Type{StaticArraysCore.SArray{Tuple{32}, UInt8, 1, 32}}})
precompile(Tuple{typeof(Base.size), Type{StaticArraysCore.SArray{Tuple{64}, UInt8, 1, 64}}})
precompile(Tuple{typeof(Base.something), Bool, Bool})
precompile(Tuple{typeof(Base.something), Nothing, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.sort), Array{PrimalServer.Nostr.PubKeyId, 1}})
precompile(Tuple{typeof(Base.split), String, Char})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(Base.striptype), Type{StaticArraysCore.SArray{Tuple{32}, UInt8, 1, 32}}})
precompile(Tuple{typeof(Base.summary), Base.TTY, Char})
precompile(Tuple{typeof(Base.tail), NTuple{10, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{4, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{5, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{6, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{7, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{8, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{9, Symbol}})
precompile(Tuple{typeof(Base.tail), Tuple{Int64, Tuple{StaticArrays.SOneTo{32}, Int64}}})
precompile(Tuple{typeof(Base.tail), Tuple{Int64, Tuple{StaticArrays.SOneTo{64}, Int64}}})
precompile(Tuple{typeof(Base.tail), Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.tail), Tuple{Tuple{Tuple{StaticArrays.SOneTo{32}, Int64}}, Tuple{Tuple{StaticArrays.SOneTo{32}, Int64}}}})
precompile(Tuple{typeof(Base.trailing_zeros), Int64})
precompile(Tuple{typeof(Base._truncate_at_width_or_chars), Bool, String, Int64})
precompile(Tuple{typeof(Base.tryparse), Type{Bool}, String})
precompile(Tuple{typeof(Base.:(|>)), Tuple{Array{Any, 1}, Array{Any, 1}}, typeof(Base.string)})
precompile(Tuple{typeof(Base.:(<=)), UInt8, UInt64})
precompile(Tuple{typeof(Base.union!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.union), Array{Pair{PrimalServer.Nostr.EventId, String}, 1}, Base.Dict{PrimalServer.Nostr.EventId, String}})
precompile(Tuple{typeof(Base.union), Base.Dict{PrimalServer.Nostr.EventId, String}, Base.Dict{PrimalServer.Nostr.EventId, String}})
precompile(Tuple{typeof(Base.union!), Base.Set{PrimalServer.Nostr.PubKeyId}, Base.Set{PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(Base.union!), OrderedCollections.OrderedSet{Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.union!), OrderedCollections.OrderedSet{Any}, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base.unlock), Base.ReentrantLock})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Base.Cstring}, String})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Ptr{UInt64}}}, Ptr{Ptr{UInt64}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{UInt8}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.unsafe_read), Base.PipeEndpoint, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :follower), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_reposed_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_reposted_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_reposted_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :your_post, :your_post_were_mentioned_in, :your_post_was_mentioned_by), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :you_were_mentioned_in), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:pubkey, :created_at, :type, :you_were_mentioned_in, :you_were_mentioned_by), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(Base.:(+)), Vararg{Int64, 4}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base.vcat), Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.vcat), Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(Base.vcat), Array{PrimalServer.Nostr.Tag, 1}, Array{PrimalServer.Nostr.Tag, 1}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:kind, :content), Tuple{Int64, String}}, Vararg{Any}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:kind, :pubkey, :content), Tuple{Int64, PrimalServer.Nostr.PubKeyId, String}}})
precompile(Tuple{typeof(Base.vect), Pair{Symbol, Int32}, Vararg{Any}})
precompile(Tuple{typeof(Base.vect), Pair{Symbol, Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.vect), Pair{Symbol, String}})
precompile(Tuple{typeof(Base.vect), PrimalServer.Nostr.Event, Vararg{Any}})
precompile(Tuple{typeof(Base.vect), Ptr{UInt64}, Vararg{Ptr{UInt64}}})
precompile(Tuple{typeof(Base.wait), Task})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Strings.HTTPVersion})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{1}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.IteratorSize, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Array{UInt8, 1}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Decimals.Decimal}})
precompile(Tuple{typeof(Core.convert), Type{UnionAll}, Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.print_within_stacktrace), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:cpu_target,), Tuple{Nothing}}, typeof(Base.julia_cmd)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:event_id, :limit), Tuple{String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:event_ids,), Tuple{Array{Any, 1}}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :header, :color, :percentage, :always_reprint), Tuple{Int64, String, Symbol, Bool, Bool}}, Type{Pkg.MiniProgressBars.MiniProgressBar}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Type, Function, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:kind, :event_id, :offset, :limit), Tuple{Int64, String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:limit, :until, :user_pubkey, :pubkey, :include_replies), Tuple{Int64, Int64, String, String, Bool}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:limit, :user_pubkey, :directive, :include_replies), Tuple{Int64, String, String, Bool}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:limit, :user_pubkey, :pubkey, :since, :include_replies), Tuple{Int64, String, String, Int64, Bool}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :uuid, :version, :path), Tuple{String, Base.UUID, Base.VersionNumber, String}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:n, :factor), Tuple{Int64, Float64}}, Type{Base.ExponentialBackOff}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:offset, :receiver, :limit), Tuple{Int64, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:pubkey, :extended_response), Tuple{String, Bool}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:pubkey, :limit), Tuple{String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:pubkey, :notes, :limit), Tuple{String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:pubkey, :since, :limit), Tuple{String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:pubkeys,), Tuple{Array{Any, 1}}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:pubkey,), Tuple{String}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:pubkey, :type_group, :limit), Tuple{String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:readtimeout, :iofunction, :decompress, :verbose), Tuple{Int64, Nothing, Nothing, Int64}}, typeof(HTTP.ConnectionPool.newconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:receiver, :since, :sender, :limit), Tuple{String, Int64, Nothing, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:receiver, :since, :sender, :limit), Tuple{String, Int64, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:since, :sender, :limit), Tuple{Int64, Nothing, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stderr, :stdout), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Base.DevNull}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlopen), String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeframe, :scope, :created_after, :limit), Tuple{String, String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeframe, :scope, :limit), Tuple{String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeframe, :until, :scope, :created_after, :limit), Tuple{String, Int64, String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeframe, :until, :scope, :limit), Tuple{String, Int64, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeframe, :user_pubkey, :scope, :created_after, :limit), Tuple{String, String, String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeframe, :user_pubkey, :scope, :limit), Tuple{String, String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeframe, :user_pubkey, :scope, :since, :limit), Tuple{String, String, String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeframe, :user_pubkey, :until, :scope, :created_after, :limit), Tuple{String, String, Int64, String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeframe, :user_pubkey, :until, :scope, :limit), Tuple{String, String, Int64, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:until, :pubkey, :limit), Tuple{Int64, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:until, :pubkey, :notes, :limit), Tuple{Int64, String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:until, :receiver, :sender, :limit), Tuple{Int64, String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:until, :user_pubkey, :pubkey, :limit), Tuple{Int64, String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:until, :user_pubkey, :pubkey, :type_group, :limit), Tuple{Int64, String, String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :directive, :limit), Tuple{String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :directive, :since, :limit), Tuple{String, String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :event_id, :limit), Tuple{String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :event_id, :offset, :limit), Tuple{String, String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :event_ids, :extended_response), Tuple{String, Array{Any, 1}, Bool}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :event_ids), Tuple{String, Array{Any, 1}}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :pubkey, :limit), Tuple{String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :pubkey, :notes, :limit), Tuple{String, String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :pubkey, :notes, :since, :limit), Tuple{String, String, String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :pubkey, :since, :limit), Tuple{String, String, Int64, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :pubkey, :since, :type_group, :limit), Tuple{String, String, Int64, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :pubkey), Tuple{String, String}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :relation, :limit), Tuple{String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :relation), Tuple{String, String}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :selector), Tuple{String, String}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey,), Tuple{String}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :until, :directive, :limit), Tuple{String, Int64, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:user_pubkey, :until, :pubkey, :notes, :limit), Tuple{String, Int64, String, String, Int64}}, typeof(Base.invokelatest), Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Base.SHA1, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Pkg.Versions.VersionSpec}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, String, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :version, :tree_hash), Tuple{Base.UUID, String, Base.VersionNumber, Base.SHA1}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :version, :tree_hash), Tuple{Base.UUID, String, Base.VersionNumber, Nothing}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(DataStructures._expand16), UInt8})
precompile(Tuple{typeof(Dates.UTM), Int64})
precompile(Tuple{typeof(HTTP.ConnectionPool.keepalive!), Sockets.TCPSocket})
precompile(Tuple{typeof(HTTP.ConnectionPool.releaseconnection), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, Bool})
precompile(Tuple{typeof(HTTP.IOExtras.bytes), Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.IOExtras.nbytes), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(HTTP._length_assert)})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.Messages.hasheader), Nothing, String})
precompile(Tuple{typeof(HTTP.Messages.ischunked), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.isredirect), HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, HTTP.Messages.Request})
precompile(Tuple{typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, Int64}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:event_id, :likes, :replies, :mentions, :reposts, :zaps, :satszapped, :score, :score24h), Tuple{PrimalServer.Nostr.EventId, Vararg{Int64, 8}}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:event_id, :replied, :liked, :reposted, :zapped), Tuple{PrimalServer.Nostr.EventId, Vararg{Bool, 4}}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:event_id, :words), Tuple{PrimalServer.Nostr.EventId, Int64}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :follower), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_reposed_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_reposted_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_reposted_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :your_post, :your_post_were_mentioned_in, :your_post_was_mentioned_by), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :you_were_mentioned_in), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :created_at, :type, :you_were_mentioned_in, :you_were_mentioned_by), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :followers_count), Tuple{PrimalServer.Nostr.PubKeyId, Int64}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :follows_count, :followers_count, :note_count, :long_form_note_count, :reply_count, :time_joined, :relay_count, :total_zap_count, :total_satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Int64, Int64, Int64, Int64, Int64, Nothing, Int64, Int64, Int64}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:pubkey, :follows_count, :followers_count, :note_count, :long_form_note_count, :reply_count, :time_joined, :relay_count, :total_zap_count, :total_satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Vararg{Int64, 9}}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:since, :until, :order_by), Tuple{Int64, Int64, Symbol}}})
precompile(Tuple{typeof(JSON.Writer.json), NamedTuple{(:your_follows, :your_inner_network, :your_outer_network, :all_users), NTuple{4, Int64}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Pair{String, Float32}, 1}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Int64}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:event_id, :created_at, :sender, :receiver, :amount_sats, :zap_receipt_id), Tuple{PrimalServer.Nostr.EventId, Int64, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:event_id, :likes, :replies, :mentions, :reposts, :zaps, :satszapped, :score, :score24h), Tuple{PrimalServer.Nostr.EventId, Vararg{Int64, 8}}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:event_id, :replied, :liked, :reposted, :zapped), Tuple{PrimalServer.Nostr.EventId, Vararg{Bool, 4}}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:event_id, :resources), Tuple{PrimalServer.Nostr.EventId, Array{Any, 1}}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:event_id, :words), Tuple{PrimalServer.Nostr.EventId, Int64}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:order_by,), Tuple{Symbol}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :follower), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_reposed_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :post_your_post_was_mentioned_in, :your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :post_you_were_mentioned_in, :who_reposted_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_liked_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_replied_to_it, :reply), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_reposted_it), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :your_post, :who_zapped_it, :satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :your_post, :your_post_were_mentioned_in, :your_post_was_mentioned_by), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :you_were_mentioned_in), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :created_at, :type, :you_were_mentioned_in, :you_were_mentioned_by), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :followers_count), Tuple{PrimalServer.Nostr.PubKeyId, Int64}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :follows_count, :followers_count, :note_count, :long_form_note_count, :reply_count, :time_joined, :relay_count, :total_zap_count, :total_satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Int64, Int64, Int64, Int64, Int64, Nothing, Int64, Int64, Int64}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pubkey, :follows_count, :followers_count, :note_count, :long_form_note_count, :reply_count, :time_joined, :relay_count, :total_zap_count, :total_satszapped), Tuple{PrimalServer.Nostr.PubKeyId, Vararg{Int64, 9}}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:since, :until, :order_by), Tuple{Int64, Int64, Symbol}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:your_follows, :your_inner_network, :your_outer_network, :all_users), NTuple{4, Int64}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, PrimalServer.Nostr.Event})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{NamedTuple{(:kind, :content), Tuple{Int64, String}}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{String, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:query, :user_pubkey, :until, :limit), Tuple{String, String, Int64, Int64}}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:query, :user_pubkey, :limit), Tuple{String, String, Int64}}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, NamedTuple{(:kind, :content), Tuple{Int64, String}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, NamedTuple{(:kind, :pubkey, :content), Tuple{Int64, PrimalServer.Nostr.PubKeyId, String}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, NamedTuple{(:kind, :tags), Tuple{Int64, Array{Any, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, NamedTuple{(:s, :a, :w, :h, :mt, :dur, :media_url), Tuple{Char, Int64, Int64, Int64, String, Float64, String}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, NamedTuple{(:url, :mimetype, :md_title, :md_description, :md_image, :icon_url), NTuple{6, String}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, NamedTuple{(:url, :variants, :mt), Tuple{String, Array{Any, 1}, String}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, NamedTuple{(:url, :variants), Tuple{String, Array{Any, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Nothing})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, PrimalServer.Nostr.Event})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, PrimalServer.Nostr.TagAny})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{PrimalServer.Nostr.Tag, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Bool})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Char})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Float64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Int32})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Nothing})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, PrimalServer.DB.NotificationType})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, PrimalServer.Nostr.EventId})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, PrimalServer.Nostr.PubKeyId})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, PrimalServer.Nostr.Sig})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Symbol})
precompile(Tuple{typeof(OrderedCollections.hashindex), NamedTuple{(:kind, :content), Tuple{Int64, String}}, Int64})
precompile(Tuple{typeof(OrderedCollections.hashindex), PrimalServer.Nostr.Event, Int64})
precompile(Tuple{typeof(Pkg.API.instantiate)})
precompile(Tuple{typeof(Pkg.Types.read_project_deps), Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Types.read_project_uuid), String})
precompile(Tuple{typeof(Pkg.Types.read_project_version), String})
precompile(Tuple{typeof(PrimalServer.App.cast), Nothing, Type{PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(PrimalServer.App.eval), Expr})
precompile(Tuple{typeof(PrimalServer.App.include), String})
precompile(Tuple{typeof(PrimalServer.App.range), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(PrimalServer.Bech32.bech32_verify_checksum), String, Array{UInt8, 1}})
precompile(Tuple{typeof(PrimalServer.DB.db_args_mapped), Type, NTuple{4, Int64}})
precompile(Tuple{typeof(PrimalServer.DB.db_args_mapped), Type, NTuple{5, Int64}})
precompile(Tuple{typeof(PrimalServer.DB.db_args_mapped), Type, Tuple{Int64}})
precompile(Tuple{typeof(PrimalServer.DB.db_args_mapped), Type, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(PrimalServer.DB.db_args_mapped), Type, Tuple{PrimalServer.Nostr.PubKeyId}})
precompile(Tuple{typeof(PrimalServer.DB.db_args_mapped), Type, Tuple{PrimalServer.Nostr.PubKeyId, Vararg{Int64, 4}}})
precompile(Tuple{typeof(PrimalServer.DB.notif2namedtuple), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, Array{UInt8, 1}, Array{UInt8, 1}, Array{Any, 1}, Int64}})
precompile(Tuple{typeof(PrimalServer.DB.notif2namedtuple), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, Array{UInt8, 1}, Array{UInt8, 1}, Array{Any, 1}, Nothing}})
precompile(Tuple{typeof(PrimalServer.DB.notif2namedtuple), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, Array{UInt8, 1}, Array{UInt8, 1}, Array{Any, 1}, String}})
precompile(Tuple{typeof(PrimalServer.DB.notif2namedtuple), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, Array{UInt8, 1}, Array{UInt8, 1}, Int64, Nothing}})
precompile(Tuple{typeof(PrimalServer.DB.notif2namedtuple), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, Array{UInt8, 1}, Array{UInt8, 1}, Nothing, Nothing}})
precompile(Tuple{typeof(PrimalServer.DB.notif2namedtuple), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, Array{UInt8, 1}, Array{UInt8, 1}, String, Int64}})
precompile(Tuple{typeof(PrimalServer.DB.notif2namedtuple), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, Array{UInt8, 1}, Array{UInt8, 1}, String, Nothing}})
precompile(Tuple{typeof(PrimalServer.DB.notif2namedtuple), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, Array{UInt8, 1}, Array{UInt8, 1}, String, String}})
precompile(Tuple{typeof(PrimalServer.DB.notif2namedtuple), Tuple{PrimalServer.Nostr.PubKeyId, Int64, PrimalServer.DB.NotificationType, Array{UInt8, 1}, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(PrimalServer.Media.cdn_url), String, String, Int64})
precompile(Tuple{typeof(PrimalServer.Nostr.vec2tags), Array{Any, 1}})
precompile(Tuple{typeof(PrimalServer.Utils.active_sleep), Float64, Base.RefValue{Bool}})
precompile(Tuple{typeof(PrimalServer.Utils.print_exceptions)})
precompile(Tuple{typeof(PrimalServer.Utils.print_exceptions), Base.TTY})
precompile(Tuple{typeof(Random.seed!), Array{UInt64, 1}})
precompile(Tuple{typeof(REPL.REPLCompletions.UndefVarError_hint), Base.TTY, UndefVarError})
precompile(Tuple{typeof(Sockets.connect!), Sockets.TCPSocket, Sockets.IPv4, UInt64})
precompile(Tuple{typeof(Sockets.uv_connectcb), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Sockets.uv_getaddrinfocb), Ptr{Nothing}, Int32, Ptr{Nothing}})
precompile(Tuple{typeof(Sockets.wait_connected), Sockets.TCPSocket})
precompile(Tuple{typeof(StaticArrays._axes), StaticArraysCore.Size{(32,)}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArraysCore.Size{(64,)}})
precompile(Tuple{typeof(StaticArraysCore.tuple_length), Type{Tuple{32}}})
precompile(Tuple{typeof(StaticArraysCore.tuple_length), Type{Tuple{64}}})
precompile(Tuple{typeof(StaticArraysCore.tuple_minimum), Type{Tuple{32}}})
precompile(Tuple{typeof(StaticArraysCore.tuple_minimum), Type{Tuple{64}}})
precompile(Tuple{typeof(StaticArraysCore.tuple_prod), Type{Tuple{32}}})
precompile(Tuple{typeof(StaticArraysCore.tuple_prod), Type{Tuple{64}}})
precompile(Tuple{typeof(StaticArraysCore.tuple_tuple), Type{Tuple{32}}})
precompile(Tuple{typeof(StaticArraysCore.tuple_tuple), Type{Tuple{64}}})
precompile(Tuple{typeof(StaticArrays.dimension_mismatch_fail), Type, Array{UInt8, 1}})
precompile(Tuple{typeof(StaticArrays.has_eltype), Type{StaticArraysCore.SArray{Tuple{32}, UInt8, 1, 32}}})
precompile(Tuple{typeof(StaticArrays.has_eltype), Type{StaticArraysCore.SArray{Tuple{64}, UInt8, 1, 64}}})
precompile(Tuple{typeof(StaticArrays.has_ndims), Type{StaticArraysCore.SArray{Tuple{32}, UInt8, 1, 32}}})
precompile(Tuple{typeof(StaticArrays.has_ndims), Type{StaticArraysCore.SArray{Tuple{64}, UInt8, 1, 64}}})
precompile(Tuple{typeof(StaticArrays.has_size), Type{StaticArraysCore.SArray{Tuple{32}, UInt8, 1, 32}}})
precompile(Tuple{typeof(StaticArrays.has_size), Type{StaticArraysCore.SArray{Tuple{64}, UInt8, 1, 64}}})
precompile(Tuple{typeof(StaticArrays._Length), Int64})
precompile(Tuple{typeof(Test.do_test), Test.ExecutionResult, Any})
precompile(Tuple{typeof(URIs._length_assert)})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Array{Any, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Int32})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, PrimalServer.Nostr.EventId})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, PrimalServer.Nostr.PubKeyId})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, TypeVar})
precompile(Tuple{Type{Pkg.Registry.RegistryInstance}, String, String, Base.UUID, String, String, Base.Dict{Base.UUID, Pkg.Registry.PkgEntry}, Base.SHA1, Base.Dict{String, String}, Base.Dict{String, Base.UUID}})
precompile(Tuple{Type{PrimalServer.Nostr.Event}, Base.Dict{String, Any}})
precompile(Tuple{Type{PrimalServer.Nostr.EventId}, Array{Any, 1}})
precompile(Tuple{Type{PrimalServer.Nostr.EventId}, String})
precompile(Tuple{Type{PrimalServer.Nostr.Event}, PrimalServer.Nostr.EventId, PrimalServer.Nostr.PubKeyId, Int64, Int64, Array{PrimalServer.Nostr.TagAny, 1}, String, PrimalServer.Nostr.Sig})
precompile(Tuple{Type{PrimalServer.Nostr.PubKeyId}, Array{Any, 1}})
precompile(Tuple{Type{PrimalServer.Nostr.PubKeyId}, Nothing})
precompile(Tuple{Type{PrimalServer.Nostr.PubKeyId}, String})
precompile(Tuple{Type{Ptr{UInt64}}, Int64})
precompile(Tuple{Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{Type{Sockets.IPv4}, Int64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{32}, UInt8, 1, 32}}, NTuple{32, Int64}})
precompile(Tuple{Type{StaticArraysCore.Size{S} where S}, Type{Tuple{32}}})
precompile(Tuple{Type{StaticArraysCore.Size{S} where S}, Type{Tuple{64}}})
precompile(Tuple{Type{StaticArrays.Length{32}}})
precompile(Tuple{Type{StaticArrays.Length{64}}})
precompile(Tuple{Type{Tuple}, StaticArraysCore.Size{(32,)}})
precompile(Tuple{Type{Tuple}, StaticArraysCore.Size{(64,)}})






precompile(Tuple{Type{Array{Dates.DateTime, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{Type{Dates.DateTime}, Dates.DateTime})
precompile(Tuple{Type{NamedTuple{(:connsel, :init_queries), T} where T<:Tuple}, Tuple{String, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:connsel, :keycolumn, :valuecolumn), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{Type{NamedTuple{(:ignore_loaded,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:interval,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{Type{NamedTuple{(:keycolumn, :valuecolumn), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{Type{NamedTuple{(:name, :uuid, :version, :path), T} where T<:Tuple}, Tuple{String, Base.UUID, Base.VersionNumber, String}})
precompile(Tuple{Type{NamedTuple{(:path, :size, :link), T} where T<:Tuple}, Tuple{String, Int64, String}})
precompile(Tuple{Type{NamedTuple{(:period,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{Type{NamedTuple{(:period,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:table,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Base.SHA1, Base.VersionNumber}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Pkg.Versions.VersionSpec}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, String, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :version, :tree_hash), T} where T<:Tuple}, Tuple{Base.UUID, String, Base.VersionNumber, Base.SHA1}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :version, :tree_hash), T} where T<:Tuple}, Tuple{Base.UUID, String, Base.VersionNumber, Nothing}})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Base.close), Base.DevNull})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Union{Array{String, 1}, String}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.UUID}}, Base.UUID})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Pkg.Types.UpgradeLevel, Base.VersionNumber, Pkg.Versions.VersionSpec}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{String, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.eof), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, Bool})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(Base.hashindex), Symbol, Int64})
precompile(Tuple{typeof(Base.ifelse), Bool, Float64, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:init_extra_indexes,), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:init_queries,), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:keycolumn, :init_queries), Tuple{String, Array{String, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:keycolumn, :valuecolumn, :init_queries), Tuple{String, String, Array{String, 1}}}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt16})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), Base.PipeEndpoint, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Array{String, 1}, String}}, Array{String, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Float64}, Float64})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageEntry, Symbol, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.Project, Symbol, Base.UUID})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.Project, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.signbit), Int64})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}})
precompile(Tuple{typeof(Base.something), Bool, Bool})
precompile(Tuple{typeof(Base.trailing_zeros), Int64})
precompile(Tuple{typeof(Base.tryparse), Type{Bool}, String})
precompile(Tuple{typeof(Base.unlock), Base.ReentrantLock})
precompile(Tuple{typeof(Base.unsafe_read), Base.PipeEndpoint, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.wait), Task})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Array{UInt8, 1}}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Decimals.Decimal}})
precompile(Tuple{typeof(Core.convert), Type{UnionAll}, Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :uuid, :version, :path), Tuple{String, Base.UUID, Base.VersionNumber, String}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlopen), String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Base.SHA1, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Pkg.Versions.VersionSpec}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, String, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :version, :tree_hash), Tuple{Base.UUID, String, Base.VersionNumber, Base.SHA1}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :version, :tree_hash), Tuple{Base.UUID, String, Base.VersionNumber, Nothing}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Pkg.API.instantiate)})
precompile(Tuple{typeof(Pkg.Types.read_project_deps), Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Types.read_project_uuid), String})
precompile(Tuple{typeof(Pkg.Types.read_project_version), String})
precompile(Tuple{Type{Pkg.Registry.RegistryInstance}, String, String, Base.UUID, String, String, Base.Dict{Base.UUID, Pkg.Registry.PkgEntry}, Base.SHA1, Base.Dict{String, String}, Base.Dict{String, Base.UUID}})


